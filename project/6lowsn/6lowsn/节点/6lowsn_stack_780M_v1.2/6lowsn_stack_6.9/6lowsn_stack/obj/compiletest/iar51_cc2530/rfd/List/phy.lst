###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                16/Oct/2013  13:20:11 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\6LoWSN\6lowsn_stack\src\stack\phy.c             #
#    Command line       =  F:\6LoWSN\6lowsn_stack\src\stack\phy.c -D          #
#                          LOWSN_DEBUG -D aExtendedAddress_B7=0x00 -D         #
#                          aExtendedAddress_B6=0x53 -D                        #
#                          aExtendedAddress_B5=0x50 -D                        #
#                          aExtendedAddress_B4=0x40 -D                        #
#                          aExtendedAddress_B3=0x30 -D                        #
#                          aExtendedAddress_B2=0x20 -D                        #
#                          aExtendedAddress_B1=0x10 -D                        #
#                          aExtendedAddress_B0=0x00 -D LOWSN_SENSOR_TYPE=1    #
#                          -lcN F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_ #
#                          cc2530\rfd\List\ -o F:\6LoWSN\6lowsn_stack\obj\com #
#                          piletest\iar51_cc2530\rfd\Obj\ -e --no_cse         #
#                          --no_unroll --no_inline --no_code_motion           #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8 -I      #
#                          F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc253 #
#                          0\..\..\..\SRC\STACK\ -I                           #
#                          F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc253 #
#                          0\..\..\..\SRC\STACK\TARGET\IAR51\CC2530\ -I       #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ol             #
#    List file          =  F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc253 #
#                          0\rfd\List\phy.lst                                 #
#    Object file        =  F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc253 #
#                          0\rfd\Obj\phy.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

F:\6LoWSN\6lowsn_stack\src\stack\phy.c
      1          /*
      2          *2006/08/16 WXL 2.0
      3           */
      4          
      5          /*
      6          V0.2 added PC-based binding         21/July/2006
      7          V0.1 Initial Release                10/July/2006
      8          
      9          */
     10          
     11          
     12          
     13          #include "compiler.h"
     14          #include "6lowsn_config.h"         //user configurations
     15          #include "6lowsn_common_types.h"   //types common acrosss most files
     16          #include "ieee_lrwpan_defs.h"
     17          #include "hal.h"
     18          #include "halStack.h"
     19          
     20          #include "console.h"
     21          #include "debug.h"
     22          #include "memalloc.h"
     23          #include "phy.h"
     24          
     25          
     26          #include "evboard.h"
     27          
     28          
     29          
     30          PHY_PIB phy_pib;
     31          PHY_SERVICE a_phy_service;
     32          PHY_STATE_ENUM phyState;
     33          
     34          //static tmp space for that is used by NET, APS, MAC layers
     35          //since only one TX can be in progress at a time, there will be
     36          //not contention for this.
     37          //The current frame is built up in this space, in reverse transmit order.
     38          BYTE tmpTxBuff[LOWSN_MAX_FRAME_SIZE];
     39          
     40          void phyInit(void ) {
     41            MemInit();  //initialize memory
     42            phyState = PHY_STATE_IDLE;
     43            phy_pib.flags.val = 0;
     44          }
     45          
     46          
     47          //call back from HAL to here, can be empty functions
     48          //not needed in this stack
     49          void phyRxCallback(void) {
     50          }
     51          
     52          void phyTxStartCallBack(void) {
     53          phy_pib.txStartTime = halGetMACTimer();
     54          
     55          }
     56          
     57          void phyTxEndCallBack(void) {
     58          phy_pib.flags.bits.txFinished = 1;   //TX is finished.
     59          }
     60          
     61          
     62          
     63          void phyFSM(void) {
     64          
     65          	UINT16 i;	
     66          	BYTE *pt;
     67          	
     68            //do evbpolling here
     69            evbPoll();
     70          
     71            //check background tasks here
     72          
     73            switch (phyState) {
     74            case PHY_STATE_IDLE:
     75          	  halIdle();  //Hal Layer might want to do something in idle state
     76              break;
     77            case PHY_STATE_COMMAND_START:
     78              switch(a_phy_service.cmd) {
     79                case LOWSN_SVC_PHY_INIT_RADIO: //not split phase
     80                 a_phy_service.status = halInitRadio(phy_pib.phyCurrentFrequency,
     81                                                            phy_pib.phyCurrentChannel,
     82                                                            a_phy_service.args.phy_init_radio_args.radio_flags
     83                                                              );
     84          	   phyState = PHY_STATE_IDLE;
     85                 break;
     86                case LOWSN_SVC_PHY_TX_DATA:
     87                  phy_pib.flags.bits.txFinished = 0;
     88          
     89          	// 打印发出的数据包
     90          	DEBUG_STRING(DBG_INFO, " \n***** TX BUF *********\n");
     91          	pt=phy_pib.currentTxFrm;
     92          	for (i=0; i<phy_pib.currentTxFlen;i++) {
     93          		DEBUG_UINT8(DBG_INFO, *pt);
     94          		DEBUG_STRING(DBG_INFO, "  ");
     95          		pt++;
     96              	}	
     97          	DEBUG_STRING(DBG_INFO, " \n***** TX BUF *********\n");
     98          		
     99                  a_phy_service.status =
    100                     halSendPacket(phy_pib.currentTxFlen,
    101                                   phy_pib.currentTxFrm);
    102                  if (a_phy_service.status == LOWSN_STATUS_SUCCESS) {
    103                    //TX started, wait for it to end.
    104                    phyState = PHY_STATE_TX_WAIT;
    105                  }else {
    106                    //something failed, will give up on this, MAC can take action if it wants
    107                    //should not happen, indicate an error to console
    108                    DEBUG_STRING(1,"PHY: TX did not start\n");
    109                    phyState = PHY_STATE_IDLE;
    110                  }
    111                 break;
    112               default: break;
    113              }//end switch cmd
    114              break;
    115            case PHY_STATE_TX_WAIT:  //wait for TX out of radio to complete or timeout
    116              if (phy_pib.flags.bits.txFinished){
    117                  phyState = PHY_STATE_IDLE;
    118               }
    119              else if  (halMACTimerNowDelta(phy_pib.txStartTime) > MAX_TX_TRANSMIT_TIME){
    120                //should not happen, indicate an error to console
    121                DEBUG_STRING(1,"PHY: MAX_TX_TRANSMIT_TIME timeout\n");
    122          	  a_phy_service.status = LOWSN_STATUS_PHY_TX_FINISH_FAILED;
    123                //no action for now, will see if this happens
    124                phyState = PHY_STATE_IDLE;
    125              }
    126              break;
    127            default: break;
    128            }//end switch phyState
    129          }
    130          

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     phyFSM                          0      0     18
       -> evbPoll                    0      0     32
       -> halInitRadio               0      0     36
       -> conPrintROMString_func     0      0     32
       -> conPrintUINT8              0      0     32
       -> conPrintROMString_func     0      0     32
       -> conPrintROMString_func     0      0     32
       -> halSendPacket              0      0     32
       -> conPrintROMString_func     0      0     32
       -> halGetMACTimer             0      0     32
       -> conPrintROMString_func     0      0     32
     phyInit                         2      0      0
       -> MemInit                    4      0      0
     phyRxCallback                   0      0      0
     phyTxEndCallBack                2      0      0
     phyTxStartCallBack              0      0     12
       -> halGetMACTimer             0      0     24


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     phy_pib                                17
     a_phy_service                           4
     phyState                                1
     tmpTxBuff                             127
     phyInit                                26
     phyRxCallback                           3
     phyTxStartCallBack                     29
     phyTxEndCallBack                       23
     phyFSM                                365
     xxxxromstr                             26
     xxxxromstr                              3
     xxxxromstr                             26
     xxxxromstr                             23
     xxxxromstr                             35
     __Constant_ffffff                       4
     ?<Initializer for __Constant_ffffff>    4
     __Constant_12d                          4
     ?<Initializer for __Constant_12d>       4
     ??phyInit?relay                         6
     ??phyRxCallback?relay                   6
     ??phyTxStartCallBack?relay              6
     ??phyTxEndCallBack?relay                6
     ??phyFSM?relay                          6

 
 446 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 113 bytes in segment CODE_C
   8 bytes in segment XDATA_I
   8 bytes in segment XDATA_ID
 149 bytes in segment XDATA_Z
 
 589 bytes of CODE  memory (+ 8 bytes shared)
 149 bytes of XDATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
