###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                16/Oct/2013  13:20:30 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\6LoWSN\6lowsn_stack\src\stack\console.c         #
#    Command line       =  F:\6LoWSN\6lowsn_stack\src\stack\console.c -D      #
#                          LOWSN_DEBUG -D aExtendedAddress_B7=0x00 -D         #
#                          aExtendedAddress_B6=0x51 -D                        #
#                          aExtendedAddress_B5=0x50 -D                        #
#                          aExtendedAddress_B4=0x40 -D                        #
#                          aExtendedAddress_B3=0x30 -D                        #
#                          aExtendedAddress_B2=0x20 -D                        #
#                          aExtendedAddress_B1=0x10 -D                        #
#                          aExtendedAddress_B0=0x00 -D LOWSN_COORDINATOR -D   #
#                          LOWSN_SLIP_TO_HOST -lcN F:\6LoWSN\6lowsn_stack\obj #
#                          \compiletest\iar51_cc2530\edge_coord\List\ -o      #
#                          F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc253 #
#                          0\edge_coord\Obj\ -e --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs 8  #
#                          -I F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc #
#                          2530\..\..\..\SRC\STACK\ -I                        #
#                          F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc253 #
#                          0\..\..\..\SRC\STACK\TARGET\IAR51\CC2530\ -I       #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc253 #
#                          0\edge_coord\List\console.lst                      #
#    Object file        =  F:\6LoWSN\6lowsn_stack\obj\compiletest\iar51_cc253 #
#                          0\edge_coord\Obj\console.r51                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\6LoWSN\6lowsn_stack\src\stack\console.c
      1          
      2          
      3          /*
      4          V0.2 added PC-based binding         21/July/2006
      5          V0.1 Initial Release                10/July/2006
      6          */
      7          
      8          
      9          #include "compiler.h"               //compiler specific
     10          #include "hal.h"
     11          #include "6lowsn_config.h"
     12          #include "halStack.h"
     13          #include "console.h"
     14          #include "6lowsn.h"
     15          
     16          //utility print functions that do not use printf and expect ROM strings
     17          //these assume that constants and strings are stored in code memory
     18          
     19          
     20          
     21          
     22          
     23          #ifdef LOWSN_SLIP_COM_QUIET
     24          
     25          void conPrintROMString_func (ROMCHAR *s)  {  } 
     26          void conPrintString (char *s)  {  }
     27          void conPrintUINT8_noleader (UINT8 x) {  }
     28          
     29          #else
     30          
     31          void conPrintROMString_func (ROMCHAR *s) {
     32            while(*s) {
     33              if (*s == '\n') halPutch('\r');
     34              halPutch(*s);
     35              s++;
     36            }
     37          }
     38          
     39          void conPrintString (char *s) {
     40            while(*s) {
     41              if (*s == '\n') halPutch('\r');
     42              halPutch(*s);
     43              s++;
     44            }
     45          }
     46          
     47          void conPrintUINT8_noleader (UINT8 x) {
     48            BYTE c;
     49            c = (x>>4)& 0xf;
     50            if (c > 9) halPutch('A'+c-10);
     51             else halPutch('0'+c);
     52            //LSDigit
     53            c = x & 0xf;
     54            if (c > 9) halPutch('A'+c-10);
     55             else halPutch('0'+c);
     56          }
     57          
     58          #endif
     59          
     60          void conPCRLF(void){
     61          	conPrintROMString("\n");
     62          }
     63          
     64          
     65          void conPrintUINT8 (UINT8 x) {
     66            conPrintROMString("0x");
     67            conPrintUINT8_noleader(x);
     68          }
     69          
     70          void conPrintUINT16 (UINT16 x) {
     71           BYTE c;
     72          
     73           conPrintROMString("0x");
     74           c = (x >> 8);
     75           conPrintUINT8_noleader(c);
     76           c = (BYTE) x;
     77           conPrintUINT8_noleader(c);
     78          }
     79          
     80          
     81          void conPrintUINT32 (UINT32 x) {
     82           BYTE c;
     83           conPrintROMString("0x");
     84           c = (x >> 24);
     85           conPrintUINT8_noleader(c);
     86           c = (x >> 16);
     87           conPrintUINT8_noleader(c);
     88           c = (x >> 8);
     89           conPrintUINT8_noleader(c);
     90           c = x;
     91           conPrintUINT8_noleader(c);
     92          }
     93          
     94          
     95          #if 0
     96          //assumed little endian
     97          void conPrintLADDR_bytes(BYTE *ptr) {
     98          char i;
     99           conPrintROMString("0x");
    100           for (i=8;i!=0;i--){
    101             conPrintUINT8_noleader(*(ptr+i-1));
    102          
    103            }
    104          }
    105          #endif
    106          
    107          
    108          void conPrintLADDR_bytes(BYTE *ptr)
    109          {
    110          char i;
    111           for (i=0; i < 8; i++){
    112             conPrintUINT8_noleader(*(ptr+i));
    113             conPrintROMString(" : ");
    114          
    115            }
    116          }
    117          
    118          
    119          /*---------------------------------------------------------------------*
    120          
    121          打印EUI64长地址
    122          存储顺序: 把EUI64当做类似字符数组按照阅读顺序从低向高存储
    123          
    124          *---------------------------------------------------------------------*/
    125          
    126          void conPrintLADDR(LADDR *laddr)
    127          {
    128           BYTE *ptr;
    129          
    130           ptr = &laddr->bytes[0];
    131           conPrintLADDR_bytes(ptr);
    132          }
    133          
    134          
    135          void conPrintIP6ADDR_bytes(BYTE *ptr)
    136          {
    137          	char i;
    138          	for (i=0; i < 16; i++){
    139             		conPrintUINT8_noleader(*(ptr+i));
    140             		conPrintROMString(" : ");
    141            	}
    142          
    143          }
    144          
    145          
    146          void conPrintIP6ADDR_dbytes(BYTE *ptr)
    147          {
    148          	char i;
    149          	for (i=0; i < 16; i=i+2){
    150             		conPrintUINT8_noleader(*(ptr+i));
    151             		conPrintUINT8_noleader(*(ptr+i+1));
    152             		conPrintROMString(" : ");
    153            	}
    154          }
    155          
    156          
    157          /*---------------------------------------------------------------------*
    158          
    159          打印IPv6地址
    160          type: 0:按字节逐一打印; 1或其他值: 按两个字节逐一打印
    161          
    162          
    163          *---------------------------------------------------------------------*/
    164          
    165          void conPrintIP6ADDR(IPADDR *ipaddr, UINT8 type)
    166          {
    167          	BYTE *ptr;
    168          
    169          	ptr = &ipaddr->u8[0];
    170          
    171          	if (type == 0)  {
    172           		conPrintIP6ADDR_bytes(ptr);
    173           	}	
    174          	else
    175          	{
    176          		conPrintIP6ADDR_dbytes(ptr);
    177          	}	
    178          }
    179          
    180          
    181          
    182          void conPrintConfig(void){
    183            BYTE b[8];
    184          
    185            conPrintROMString("\n*************************\n");
    186            conPrintROMString("     6LoWSN Stack \n");
    187            conPrintROMString("        CQUPT       \n");
    188            conPrintROMString("     Version  ");
    189            conPrintROMString(LOWSN_VERSION)
    190            conPCRLF();
    191              conPrintROMString("*************************\n");
    192          #ifdef LOWSN_COORDINATOR
    193            conPrintROMString("Coordinator, ");
    194          #endif
    195          #ifdef LOWSN_ROUTER
    196            conPrintROMString("Router, ");
    197          #endif
    198          #ifdef LOWSN_RFD
    199            conPrintROMString("RFD, ");
    200          #endif
    201            conPrintROMString("Address: ");
    202            halGetProcessorIEEEAddress(b);
    203            conPrintLADDR_bytes(b);
    204          
    205            conPCRLF();
    206            conPrintROMString("Default PAN: ");
    207            conPrintUINT32(LOWSN_DEFAULT_PANID);
    208          
    209            conPrintROMString(",Default Channel: ");
    210            conPrintUINT8(LOWSN_DEFAULT_START_CHANNEL);
    211          
    212            conPCRLF();
    213            conPCRLF();
    214          }
    215          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     conPCRLF                           0      0      0
     conPrintConfig                     2      0      8
       -> halGetProcessorIEEEAddress
                                        4      0     16
       -> conPrintLADDR_bytes           4      0     16
     conPrintIP6ADDR                    2      0      0
       -> conPrintIP6ADDR_bytes         4      0      0
       -> conPrintIP6ADDR_dbytes        4      0      0
     conPrintIP6ADDR_bytes              0      0      0
     conPrintIP6ADDR_dbytes             0      0      0
     conPrintLADDR                      2      0      0
       -> conPrintLADDR_bytes           4      0      0
     conPrintLADDR_bytes                0      0      8
     conPrintROMString_func             0      0      0
     conPrintString                     0      0      0
     conPrintUINT16                     0      0      0
     conPrintUINT32                     0      0      0
     conPrintUINT8                      0      0      0
     conPrintUINT8_noleader             0      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     conPrintROMString_func            3
     conPrintString                    3
     conPrintUINT8_noleader            3
     conPCRLF                          3
     conPrintUINT8                     3
     conPrintUINT16                    3
     conPrintUINT32                    3
     conPrintLADDR_bytes               3
     conPrintLADDR                     7
     ?Subroutine0                      7
     conPrintIP6ADDR_bytes             3
     conPrintIP6ADDR_dbytes            3
     conPrintIP6ADDR                  17
     conPrintConfig                   36
     ??conPrintROMString_func?relay    6
     ??conPrintString?relay            6
     ??conPrintUINT8_noleader?relay    6
     ??conPCRLF?relay                  6
     ??conPrintUINT8?relay             6
     ??conPrintUINT16?relay            6
     ??conPrintUINT32?relay            6
     ??conPrintLADDR_bytes?relay       6
     ??conPrintLADDR?relay             6
     ??conPrintIP6ADDR_bytes?relay     6
     ??conPrintIP6ADDR_dbytes?relay    6
     ??conPrintIP6ADDR?relay           6
     ??conPrintConfig?relay            6

 
 97 bytes in segment BANKED_CODE
 78 bytes in segment BANK_RELAYS
 
 175 bytes of CODE memory

Errors: none
Warnings: none
