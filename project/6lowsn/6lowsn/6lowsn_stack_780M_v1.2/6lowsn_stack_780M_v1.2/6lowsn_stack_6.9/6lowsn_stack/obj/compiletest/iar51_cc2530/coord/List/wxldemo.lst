##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   16/Apr/2013  17:02:18 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  near                                              #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  F:\6LoWSN\wxlzigbee20\src\simpletests\wxldemo.c   #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          F:\6LoWSN\wxlzigbee20\obj\compiletest\iar51_cc243 #
#                          0\..\..\..\src\stack\ -I                          #
#                          F:\6LoWSN\wxlzigbee20\obj\compiletest\iar51_cc243 #
#                          0\..\..\..\src\stack\target\iar51\cc2430_31\ -D   #
#                          LOWSN_DEBUG -D aExtendedAddress_B7=0x00 -D        #
#                          aExtendedAddress_B6=0x12 -D                       #
#                          aExtendedAddress_B5=0x4B -D LOWSN_COORDINATOR -D  #
#                          aExtendedAddress_B4=0x00 -D                       #
#                          aExtendedAddress_B3=0x00 -D                       #
#                          aExtendedAddress_B2=0x01 -D                       #
#                          aExtendedAddress_B1=0x21 -D                       #
#                          aExtendedAddress_B0=0x6F -D                       #
#                          LOWSN_USE_DEMO_STATIC_BIND -lcN                   #
#                          F:\6LoWSN\wxlzigbee20\obj\compiletest\iar51_cc243 #
#                          0\coord\List\ -o F:\6LoWSN\wxlzigbee20\obj\compil #
#                          etest\iar51_cc2430\coord\Obj\ -e -z9 --debug      #
#                          --core=plain --dptr=16,1 --data_model=large       #
#                          --code_model=near --calling_convention=xdata_reen #
#                          trant --place_constants=data --nr_virtual_regs 8  #
#                          F:\6LoWSN\wxlzigbee20\src\simpletests\wxldemo.c   #
#    List file          =  F:\6LoWSN\wxlzigbee20\obj\compiletest\iar51_cc243 #
#                          0\coord\List\wxldemo.lst                          #
#    Object file        =  F:\6LoWSN\wxlzigbee20\obj\compiletest\iar51_cc243 #
#                          0\coord\Obj\wxldemo.r51                           #
#                                                                            #
#                                                                            #
##############################################################################

F:\6LoWSN\wxlzigbee20\src\simpletests\wxldemo.c
      1          /*
      2            V0.1 Initial Release   10/July/2006
      3            *2006/08/16 WXL 2.0
      4          */
      5          
      6          
      7          
      8          /*
      9          This is a two node test, requires a Coordinator
     10          and an RFD. The coordinator and node simply
     11          ping-pong a packet back and forth, and print
     12          out the RSSI byte.  The RFD waits before
     13          bouncing it back, while the coordinator responds
     14          immediately.
     15          
     16          Expects coordinator, and one RFD.
     17          The topology to test should be:
     18          
     19          Coordinator ->  RFD1
     20          
     21          
     22          Start the coordinator first, then
     23          RFD1. If a RFD1 fails to join the network, try
     24          again. The RFD1 will prompt the user to hit
     25          a key to start the ping-pong.
     26          
     27          You can connect multiple RFDs if desired.
     28          
     29          You can also ping-pong through a router; see
     30          the note in usrJoinVerifyCallback(). The topology
     31          for a router would be:
     32          
     33          coord -> router -> RFD1
     34          -> RFD2
     35          -> ..RFDn
     36          
     37          
     38          This  requires Virtual Boards to be running,
     39          since a switch press is needed to start the pinging.
     40          
     41          
     42          */
     43          
     44          #include "wx_lrwpan.h"
     45          
     46          #ifndef LOWSN_COORDINATOR
     47          #define PING_DELAY   2  //wait before bouncing back
     48          #else
     49          #define PING_DELAY   0 //coordinator does not wait
     50          #endif
     51          
     52          #define RX_PING_TIMEOUT     5    //seconds
     53          //this is assumed to be the long address of our coordinator, in little endian order
     54          //used to test LONG ADDRESSING back to coordinator
     55          
     56          
     57          UINT16 ping_cnt;
     58          UINT32 my_timer;
     59          UINT32  last_tx_start;
     60          UINT8 LcdPage = 1;
     61          
     62          LADDR_UNION dstADDR;
     63          
     64          IPADDR dstIPADDR;
     65          
     66          typedef enum _PP_STATE_ENUM {
     67          	PP_STATE_START_RX,
     68          	PP_STATE_WAIT_FOR_RX,
     69          	PP_STATE_SEND,
     70          	PP_STATE_WAIT_FOR_TX
     71          }PP_STATE_ENUM;
     72          
     73          PP_STATE_ENUM ppState;
     74          BYTE rxFlag;              //set from within usrRxPacketCallback
     75          BYTE payload[2];
     76          UINT16 numTimeouts;
     77          BOOL first_packet;
     78          
     79          void  PingPong(void);
     80          
     81          void PingPong (void ) {
     82          
     83          	apsFSM();
     84          
     85          	switch (ppState) {
     86          
     87          			case  PP_STATE_START_RX:
     88          				if (!first_packet) {
     89          					my_timer= halGetMACTimer();
     90          					ppState = PP_STATE_WAIT_FOR_RX;
     91          				}else if (rxFlag) {
     92          					//on first packet, do not start timer, just wait for a packet.
     93          					ppState = PP_STATE_WAIT_FOR_RX;
     94          					first_packet = FALSE;
     95          				}
     96          				break;
     97          
     98          			case PP_STATE_WAIT_FOR_RX:
     99          				//rxFlag is set from within usrRxPacketCallback
    100          				if (rxFlag || halMACTimerNowDelta(my_timer) > MSECS_TO_MACTICKS( RX_PING_TIMEOUT *1000 )) {
    101          					if (!rxFlag) numTimeouts++;     //got tired of waiting for a response, send again
    102          					rxFlag = 0; //clear flag
    103          					if (EVB_LED1_STATE()) EVB_LED1_OFF(); else EVB_LED1_ON();
    104          					//start timer
    105          					my_timer= halGetMACTimer();
    106          					ppState = PP_STATE_SEND;
    107          
    108          				}
    109          				break;
    110          
    111          
    112          			case PP_STATE_SEND:
    113          				if ((halMACTimerNowDelta(my_timer))> MSECS_TO_MACTICKS(PING_DELAY*1000)){
    114          			//		MemDump();
    115          
    116          					//increment ping counter
    117          					ping_cnt++; //this was value received by this node
    118          					//received packet, ping it back
    119          					//format the packet
    120          					payload[0] = (BYTE) ping_cnt;
    121          					payload[1] =  (BYTE) (ping_cnt>>8);
    122          					ppState = PP_STATE_WAIT_FOR_TX;
    123          					last_tx_start = halGetMACTimer();
    124          
    125          					conPrintROMString(" before aplSendIPMSG\n");
    126          
    127          					aplSendIPMSG(APS_DSTMODE_SHORT,
    128          						dstIPADDR,
    129          						122,
    130          						2, //dst EP
    131          						0, //cluster is ignored for direct message
    132          						121,
    133          						1, //src EP
    134          						&payload[0],
    135          						2,  //msg length
    136          						apsGenTSN());  //No APS ack requested
    137          
    138          						conPrintROMString("after aplSendIPMSG \n");
    139          					ppState = PP_STATE_WAIT_FOR_TX;
    140          				}
    141          				break;
    142          
    143          			case PP_STATE_WAIT_FOR_TX:
    144          				if (apsBusy()) break; //status not ready yet if busy.
    145          				if (aplGetStatus() == LOWSN_STATUS_SUCCESS) {
    146          					ppState = PP_STATE_START_RX;
    147          					//compute the latency of this TX send operation
    148          					//aplGetLastTxTime gets the time that the LAST tx operation finished.
    149          					//this will be the latency of the TX stack operation only if no mac retries were required
    150          					last_tx_start = aplMacTicksToUs(aplGetLastTxTime() - last_tx_start);
    151          					conPrintROMString("TX Stack latency(us): ");
    152          					conPrintUINT32(last_tx_start);
    153          					conPCRLF();
    154          				}else {
    155          					conPrintROMString("Ping Send failed! Restarting timer to try again\n");
    156          					my_timer= halGetMACTimer();
    157          					ppState = PP_STATE_SEND;
    158          				}
    159          				break;
    160          	}
    161          }
    162          
    163          
    164          
    165          void main (void){
    166          
    167          
    168          	//this initialization set our SADDR to 0xFFFF,
    169          	//PANID to the default PANID
    170          
    171          	//HalInit, evbInit will have to be called by the user
    172          
    173          	numTimeouts = 0;
    174          	my_timer = 0;
    175          	first_packet = TRUE;
    176          
    177          	lowsn_ip6addr(&dstIPADDR,0xfe80,0,0,0,0x0215,0x2000,0x0002,0x2145);
    178          	
    179          	halInit();
    180          	evbInit();
    181                  InitLcd();
    182                  TurnOnDisp();
    183                  ClearScreen();
    184          
    185          	aplInit();  //init the stack
    186          	conPrintConfig();
    187          	ENABLE_GLOBAL_INTERRUPT();  //enable interrupts
    188          
    189          
    190          	EVB_LED1_OFF();
    191          	EVB_LED2_OFF();
    192          
    193          	ping_cnt = 0;
    194          	rxFlag = 0;
    195          	//debug_level = 10;
    196          
    197          
    198          #ifdef LOWSN_COORDINATOR
    199          
    200          	aplFormNetwork();
    201          	while(apsBusy()) {apsFSM();} //wait for finish
    202          	conPrintROMString("Network formed, waiting for RX\n");
    203                  Print6(7,3,"Network formed!",1);
    204          	EVB_LED1_ON();
    205          	ppState = PP_STATE_START_RX;
    206          #else
    207          	do {
    208          		aplJoinNetwork();
    209          		while(apsBusy()) {apsFSM();} //wait for finish
    210          		if (aplGetStatus() == LOWSN_STATUS_SUCCESS) {
    211          			EVB_LED1_ON();
    212                                  ClearScreen();
    213          #ifdef LOWSN_ROUTER
    214                                  Print6(0,5,"--ZIGBEE_ROUTER-- ",1);
    215          #endif
    216          #ifdef LOWSN_RFD
    217                                  Print6(0,15,"--ZIGBEE_RFD--  ",1);
    218          #endif
    219          			conPrintROMString("Network Join succeeded!\n");
    220                                  Print6(1,3,"Network Join succe",1);
    221                                  Print6(2,3,"eded!",1);
    222          			conPrintROMString("My ShortAddress is: ");
    223          			conPrintUINT16(aplGetMyShortAddress());
    224                                  Print6(3,3,"My SADDR: ",1);
    225                                  LcdPrintUINT16(aplGetMyShortAddress(),3,63);
    226          			conPCRLF();
    227          			conPrintROMString("Parent LADDR: ")
    228          			conPrintLADDR(aplGetParentLongAddress());
    229                                  Print6(4,3,"Parent LADDR: ",1);
    230                                  LcdPrintLADDR(aplGetParentLongAddress(),4,87);
    231          			conPrintROMString(", Parent SADDR: ");
    232          			conPrintUINT16(aplGetParentShortAddress());
    233          			conPCRLF();
    234          			break;
    235          		}else {
    236          			conPrintROMString("Network Join FAILED! Waiting, then trying again\n");
    237                                  ClearScreen();
    238          #ifdef LOWSN_ROUTER
    239                                  Print6(0,5,"--ZIGBEE_ROUTER-- ",1);
    240          #endif
    241          #ifdef LOWSN_RFD
    242                                  Print6(0,15,"--ZIGBEE_RFD--  ",1);
    243          #endif
    244                                  halWait(100);
    245                                  Print6(1,3,"Network Join FAILE",1);
    246                                  Print6(2,3,"D! Waiting, then t",1);
    247                                  Print6(3,3,"rying again",1);
    248          			my_timer= halGetMACTimer();
    249          			//wait for 2 seconds
    250          			while ((halMACTimerNowDelta(my_timer))< MSECS_TO_MACTICKS(2*1000));
    251          		}
    252          	} while(1);
    253          
    254          #endif
    255          
    256          #ifdef LOWSN_RFD
    257          	//now send packets
    258          	dstADDR.saddr = 0; //RFD sends to the coordinator
    259          	ppState = PP_STATE_SEND;
    260          	conPrintROMString("Begin to send data!\n");
    261          
    262          #endif
    263          
    264          #if (defined(LOWSN_RFD) || defined(LOWSN_COORDINATOR))
    265          	//WARNING - this is only for latency testing, max MAC retries is normally
    266          	//set to aMaxFrameRetries (value=3) as defined in mac.h. Setting this to 0 means
    267          	//that there will be no automatic retransmissions of frames if we do not get a MAC ACK back.
    268          	//only do this in your normal code if you want to disable automatic retries
    269          	aplSetMacMaxFrameRetries(0);
    270          
    271          	while (1) {
    272          		PingPong();
    273          	}
    274          #endif
    275          
    276          
    277          #ifdef LOWSN_ROUTER
    278          	//router does nothing, just routes
    279          	DEBUG_PRINTNEIGHBORS(DBG_INFO);
    280          	conPrintROMString("Router, doing its thing.!\n");
    281                  Print6(7,3,"Router is running!",1);
    282          	while(1) {apsFSM();}
    283          #endif
    284          
    285          
    286          }
    287          
    288          //########## Callbacks ##########
    289          
    290          //callback for anytime the Zero Endpoint RX handles a command
    291          //user can use the APS functions to access the arguments
    292          //and take additional action is desired.
    293          //the callback occurs after the ZEP has already taken
    294          //its action.
    295          LOWSN_STATUS_ENUM  usrZepRxCallback(void){
    296          
    297          #ifdef LOWSN_COORDINATOR
    298          	if (aplGetRxCluster() == ZEP_END_DEVICE_ANNOUNCE) {
    299          		//a new end device has announced itself, print out the
    300          		//the neightbor table and address map
    301          		dbgPrintNeighborTable();
    302          	}
    303          #endif
    304           return LOWSN_STATUS_SUCCESS;
    305          }
    306          
    307          //callback from APS when packet is received
    308          //user must do something with data as it is freed
    309          //within the stack upon return.
    310          
    311          LOWSN_STATUS_ENUM  usrRxPacketCallback(void) {
    312          
    313          	BYTE len, *ptr;
    314          
    315          	BYTE i;
    316          
    317          	IPADDR srcIP;
    318          	
    319          	//just print out this data
    320                  if(LcdPage == 1)
    321                  {
    322                    ClearScreen();
    323                  }
    324          #ifdef LOWSN_COORDINATOR
    325                  Print6(0,9,"--ZIGBEE_COORD-- ",1);
    326          #endif
    327          #ifdef LOWSN_ROUTER
    328                  Print6(0,5,"--ZIGBEE_ROUTER-- ",1);
    329          #endif
    330          #ifdef LOWSN_RFD
    331                  Print6(0,15,"--ZIGBEE_RFD--  ",1);
    332          #endif
    333          	conPrintROMString("User Data Packet Received: \n");
    334          	conPrintROMString("SrcSADDR: ");
    335          	conPrintUINT16(aplGetRxSrcSADDR());
    336                  Print6(LcdPage,3,"SrcSADDR: ",1);
    337                  LcdPrintUINT16(aplGetRxSrcSADDR(),LcdPage++,63);
    338          	conPrintROMString(", DstEp: ");
    339          	conPrintUINT8(aplGetRxDstEp());
    340          
    341          	conPrintROMString(", DstPort: ");
    342          	conPrintUINT16(aplGetRxDstPort());
    343          
    344          	conPrintROMString(", SrcPort: ");
    345          	conPrintUINT16(aplGetRxSrcPort());
    346          
    347          	srcIP = aplGetRxSrcIPAddr();
    348          	conPrintROMString("\n Source IP is : ");
    349          	for (i=0; i< 8; i++) {
    350          		conPrintUINT16(srcIP.u16[i]);
    351          		conPrintROMString(" : ");
    352          	}
    353          	
    354          	conPrintROMString("\n , Cluster: ");
    355          	conPrintUINT8(aplGetRxCluster());
    356          	conPrintROMString(", MsgLen: ");
    357          	len = aplGetRxMsgLen();
    358          	conPrintUINT8(len);
    359          	conPrintROMString(",RSSI: ");
    360          	conPrintUINT8(aplGetRxRSSI());
    361                  Print6(LcdPage,3,"RSSI: ",1);
    362                  LcdPrintUINT8(aplGetRxRSSI(),LcdPage++,39);
    363          	conPCRLF();
    364          	conPrintROMString("PingCnt: ");
    365          	ptr = aplGetRxMsgData();
    366          	ping_cnt = *ptr;
    367          	ptr++;
    368          	ping_cnt += ((UINT16)*ptr)<<8;
    369          	conPrintUINT16(ping_cnt);
    370                  Print6(LcdPage,3,"PingCnt: ",1);
    371                  LcdPrintUINT16(ping_cnt,LcdPage++,57);
    372                  LcdPage++;
    373                  if(LcdPage >= 8)
    374                  {
    375                    LcdPage = 1;
    376                  }
    377          	conPrintROMString(", RxTimeouts: ");
    378          	conPrintUINT16(numTimeouts);
    379          	rxFlag = 1;//signal that we got a packet
    380          	//use this source address as the next destination address
    381          	dstADDR.saddr = aplGetRxSrcSADDR();
    382          	conPCRLF();
    383          	return LOWSN_STATUS_SUCCESS;
    384          }
    385          
    386          #ifdef LOWSN_FFD
    387          //Callback to user level to see if OK for this node
    388          //to join - implement Access Control Lists here based
    389          //upon IEEE address if desired
    390          BOOL usrJoinVerifyCallback(LADDR *ptr, BYTE capinfo){\
    391          
    392          #if 0      //set this to '1' if you want to test through a router
    393          //only accept routers.
    394          //only let routers join us if we are coord
    395          #ifdef LOWSN_COORDINATOR
    396          if (LOWSN_GET_CAPINFO_DEVTYPE(capinfo)) {
    397          	//this is a router, let it join
    398          	conPrintROMString("Accepting router\n");
    399          	return TRUE;
    400          }else {
    401          	conPrintROMString("Rejecting non-router\n");
    402          	return FALSE;
    403          }
    404          #else
    405          return TRUE;
    406          #endif
    407          
    408          #else
    409          
    410          return TRUE;
    411          
    412          #endif
    413          
    414          }
    415          
    416          BOOL usrJoinNotifyCallback(LADDR *ptr){
    417          
    418          	//allow anybody to join
    419          
    420          	conPrintROMString("Node joined: ");
    421          	conPrintLADDR(ptr);
    422                  ClearScreen();
    423          #ifdef LOWSN_COORDINATOR
    424                  Print6(0,9,"--ZIGBEE_COORD-- ",1);
    425          #endif
    426          #ifdef LOWSN_ROUTER
    427                  Print6(0,5,"--ZIGBEE_ROUTER-- ",1);
    428          #endif
    429          #ifdef LOWSN_RFD
    430                  Print6(0,15,"--ZIGBEE_RFD--  ",1);
    431          #endif
    432                  Print6(1,3,"Node joined: ",1);
    433                  LcdPrintLADDR(ptr,1,81);
    434          	conPCRLF();
    435          	DEBUG_PRINTNEIGHBORS(DBG_INFO);
    436          	return TRUE;
    437          }
    438          #endif
    439          
    440          //called when the slow timer interrupt occurs
    441          #ifdef LOWSN_ENABLE_SLOW_TIMER
    442          void usrSlowTimerInt(void ) {}
    443          #endif
    444          
    445          
    446          //general interrupt callback , when this is called depends on the HAL layer.
    447          void usrIntCallback(void){}

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     PingPong                        0      0     38
       -> apsFSM                     0      0     30
       -> halGetMACTimer             0      0     30
       -> halGetMACTimer             0      0     30
       -> evbLedGet                  0      0     30
       -> evbLedSet                  0      0     30
       -> evbLedSet                  0      0     30
       -> halGetMACTimer             0      0     30
       -> halGetMACTimer             0      0     30
       -> halGetMACTimer             0      0     30
       -> conPrintROMString_func     0      0     30
       -> aplFmtSendIPMSG            0      0     76
       -> apsFSM                     0      0     30
       -> conPrintROMString_func     0      0     30
       -> aplMacTicksToUs            0      0     30
       -> conPrintROMString_func     0      0     30
       -> conPrintUINT32             0      0     30
       -> conPCRLF                   0      0     30
       -> conPrintROMString_func     0      0     30
     main                            0      0      0
       -> halInit                    0      0      0
       -> evbInit                    0      0      0
       -> InitLcd                    0      0      0
       -> TurnOnDisp                 0      0      0
       -> ClearScreen                0      0      0
       -> apsInit                    0      0      0
       -> conPrintConfig             0      0      0
       -> evbLedSet                  0      0      0
       -> evbLedSet                  0      0      0
       -> apsFSM                     0      0      0
       -> apsFSM                     0      0      0
       -> conPrintROMString_func     0      0      0
       -> Print6                     0      0      0
       -> evbLedSet                  0      0      0
       -> PingPong                   0      0      0
     usrIntCallback                  0      0      0
     usrJoinNotifyCallback           2      0      0
       -> conPrintROMString_func     4      0      0
       -> conPrintLADDR              4      0      0
       -> ClearScreen                4      0      0
       -> Print6                     4      0      0
       -> Print6                     4      0      0
       -> LcdPrintLADDR              4      0      0
       -> conPCRLF                   4      0      0
       -> dbgPrintNeighborTable      4      0      0
     usrJoinVerifyCallback           0      0      0
     usrRxPacketCallback             2      0     24
       -> ClearScreen                0      0     48
       -> Print6                     0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT16             0      0     48
       -> Print6                     0      0     48
       -> LcdPrintUINT16             0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT8              0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT16             0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT16             0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT16             0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT8              0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT8              0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT8              0      0     48
       -> Print6                     0      0     48
       -> LcdPrintUINT8              0      0     48
       -> conPCRLF                   0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT16             0      0     48
       -> Print6                     0      0     48
       -> LcdPrintUINT16             0      0     48
       -> conPrintROMString_func     0      0     48
       -> conPrintUINT16             0      0     48
       -> conPCRLF                   0      0     48
     usrSlowTimerInt                 0      0      0
     usrZepRxCallback                2      0      0
       -> dbgPrintNeighborTable      4      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ping_cnt                          2
     my_timer                          4
     last_tx_start                     4
     LcdPage                           1
     dstADDR                           8
     dstIPADDR                        16
     ppState                           1
     rxFlag                            1
     payload                           2
     numTimeouts                       2
     first_packet                      1
     PingPong                        437
     ?Subroutine4                     10
     ?Subroutine0                      9
     ?Subroutine6                     12
     xxxxromstr                       22
     xxxxromstr                       21
     xxxxromstr                       23
     xxxxromstr                       49
     main                            263
     xxxxromstr                       32
     usrZepRxCallback                 17
     ?Subroutine7                      5
     usrRxPacketCallback             378
     ?Subroutine5                      9
     ?Subroutine3                      6
     ?Subroutine2                     17
     ?Subroutine1                      9
     xxxxromstr                       29
     xxxxromstr                       11
     xxxxromstr                       10
     xxxxromstr                       12
     xxxxromstr                       12
     xxxxromstr                       18
     xxxxromstr                        4
     xxxxromstr                       14
     xxxxromstr                       11
     xxxxromstr                        8
     xxxxromstr                       10
     xxxxromstr                       15
     usrJoinVerifyCallback             3
     usrJoinNotifyCallback            82
     xxxxromstr                       14
     usrSlowTimerInt                   1
     usrIntCallback                    1
     ?<Initializer for <Constant "--ZIGBEE_COORD--
                                      18
     ?<Initializer for <Constant "SrcSADDR: ">>
                                      11
     ?<Initializer for <Constant "RSSI: ">>
                                       7
     ?<Initializer for <Constant "PingCnt: ">>
                                      10
     ?<Initializer for <Constant "Network formed!">
                                      16
     ?<Initializer for <Constant "Node joined: ">>
                                      14
     ?<Initializer for LcdPage>        1
     ?<Initializer for __Constant_fffff>
                                       4
     ?<Initializer for __Constant_4baf1>
                                       4
     ?<Initializer for __Constant_0>
                                       4
     ?<Initializer for __Constant_ffffffff>
                                       4
     ?<Constant "--ZIGBEE_COORD-- ">
                                      18
     ?<Constant "SrcSADDR: ">         11
     ?<Constant "RSSI: ">              7
     ?<Constant "PingCnt: ">          10
     ?<Constant "Network formed!">    16
     ?<Constant "Node joined: ">      14
     __Constant_fffff                  4
     __Constant_4baf1                  4
     __Constant_0                      4
     __Constant_ffffffff               4
     _A_IEN0                           1

 
   315 bytes in segment CODE_C
 1 259 bytes in segment NEAR_CODE
     1 byte  in segment SFR_AN
    93 bytes in segment XDATA_I
    93 bytes in segment XDATA_ID
    41 bytes in segment XDATA_Z
 
 1 651 bytes of CODE  memory (+ 16 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)
   118 bytes of XDATA memory (+ 16 bytes shared)

Errors: none
Warnings: 1
